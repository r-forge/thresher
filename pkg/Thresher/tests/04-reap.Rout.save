
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(Thresher)
Loading required package: ClassDiscovery
Loading required package: cluster
Loading required package: oompaBase
Loading required package: PCDimension
> 
> # unstructured matrix
> set.seed(9948489)
> dumb <- matrix(rnorm(100*12), ncol=12)
> colnames(dumb) <- paste("G", 1:12, sep='')
> thresh <- Thresher(dumb)
> # test 'failure' version of constructor
> r <- new("Reaper", thresh,
+          useLoadings=FALSE,
+          keep=FALSE,
+          nGroups=NA,
+          fit=NA,
+          bic=NA,
+          allfits=list(),
+          metric='pearson')
> # now construct it for real
> reap <- Reaper(thresh)
> screeplot(reap)
> plot(reap)
> scatter(reap)
> heat(reap)
> 
> # matrices with structure
> set.seed(250264)
> rho <- 0.5
> nProtein <- 16
> splinter <- sample((nProtein/2) + (-3:3), 1)
> sigma1 <- matrix(rho, ncol=nProtein, nrow=nProtein)
> diag(sigma1) <- 1
> sigma2 <- sigma1
> sigma2[(1+splinter):nProtein, 1:splinter] <- 0
> sigma2[1:splinter, (1+splinter):nProtein] <- 0
> # now simulate the data
> thresh <- SimThresher(sigma2, nSample=300)
> summary(thresh@delta)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.7206  0.7506  0.7701  0.7666  0.7828  0.7991 
> # create Reaper
> reap <- Reaper(thresh)
> reap@pcdim # two real components
[1] 2
> screeplot(reap, col='gold', lcol='black')
> reap@nGroups # should be just two feature-clusters
[1] 2
> plot(reap)
> scatter(reap)
> heat(reap)
> 
> colsch <- Thresher:::.makeColorScheme(4)
> bin.hc  <- reap@signalSet@binaryClusters
> bin.csc <- colsch[cutree(bin.hc, k=4)]
> con.hc  <- reap@signalSet@continuousClusters
> con.csc <- colsch[cutree(con.hc, k=4)]
> heat(reap, Colv=as.dendrogram(bin.hc), ColSideColors=con.csc,
+        main=paste(reap@name, "binary signals, continuous colors"))
Warning message:
In if (is.na(Colv)) { :
  the condition has length > 1 and only the first element will be used
> heat(reap, Colv=as.dendrogram(con.hc), ColSideColors=bin.csc,
+        main=paste(reap@name, "continuous signals, binary colors"))
Warning message:
In if (is.na(Colv)) { :
  the condition has length > 1 and only the first element will be used
> 
> if(FALSE) {
+   makeFigures(reap)
+ }
> 
> proc.time()
   user  system elapsed 
   4.43    0.29    4.88 
